version: "3.9"

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"
      loki-max-backoff: "5s"
      loki-retries: "2"

services:
  riot-api-connector:
    build: riot-api-connector
    restart: unless-stopped
    environment:
      POSTGRES_HOST: psql-achievements
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RIOT_API_KEY: ${RIOT_API_KEY}
      IMPORT_LIMIT_MATCHES: ${IMPORT_LIMIT_MATCHES}
    depends_on:
      psql-achievements:
        condition: service_healthy
    networks:
      - stats-storage
    <<: *logging

  psql-achievements:
    image: postgres:14.2
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data
    ports:
      - "5432:5432"
    volumes:
    - ./riot-api-connector/db_init:/docker-entrypoint-initdb.d
    - pg_data:/data
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - stats-storage
    <<: *logging

  frontend:
    build: frontend/
    restart: unless-stopped
    container_name: frontend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.frontend.rule=Host(`lol-stats.de`)
      - traefik.http.services.frontend_lb.loadbalancer.server.port=3000
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=le
    networks:
      - traefik
    <<: *logging

  player-api:
    build: player-api
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_HOST: psql-achievements
      RIOT_API_KEY: $RIOT_API_KEY
      GRPC_IMPORT_HOST: riot-api-connector
      OTEL_METRICS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.name=player-api
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    networks:
      - services
      - stats-storage
      - tracing
    <<: *logging

  user-management:
    build: user-backend/user_backend/
    restart: unless-stopped
    container_name: user-management-api
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${USER_BACKEND_POSTGRES_PASSWORD}
      - POSTGRES_DB=userBackend
      - POSTGRES_HOST=user-management-database
      - POSTGRES_PORT=5432
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PYTHONPATH=.
      - FLASK_ENV=production
    depends_on:
      - user-management-database
    networks:
      - user_management
      - tracing
      - services
    <<: *logging

  user-management-database:
    image: postgres:14
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${USER_BACKEND_POSTGRES_PASSWORD}
      - POSTGRES_DB=userBackend
    ports:
      - "5431:5432"
    container_name: user-management-db
    networks:
      - user_management
    <<: *logging

volumes:
  pg_data: {}
  postgres_data: {}

networks:
  stats-storage: {}
  traefik:
    external: true
  services:
    external: true
  tracing:
    external: true
  user_management: {}

