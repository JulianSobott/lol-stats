openapi: "3.0.3"
info:
  title: League Challenges - User Management API
  description: League Challenges - User Management API
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /api/auth/me:
    get:
      summary: Get own data
      tags:
        - user
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sucessfully returned user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        '404':
          description: No token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: No token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: No Authentication in Header
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/auth/login:
    post:
      summary: Login into website
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_data'
      responses:
        '200':
          description: Sucessfully returned user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/token/info:
    get:
      summary: Verify token
      tags:
        - user
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sucessfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/auth/logout:
    post:
      summary: Log out from website
      tags:
        - user
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: No Authentication in Header
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Session already expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/auth/register:
    post:
      summary: Register new account
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_data'
      responses:
        '200':
          description: Sucessfully returned mail of registered acc
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '409':
          description: Account with given mail already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                      type: string
                  message:
                    type: string
  /api/auth/delete:
    delete:
      tags:
        - user
      summary: Deletes user from System
      parameters:
      - name: token
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Sucessfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: User not found 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/users/{user_id}:
    put:
      tags:
      - user
      summary: Set new ingame user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                region:
                  type: string
                player_uuid:
                  type: string
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucessfully patched ingame user id
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '404':
          description: User not found or invalid 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: Not authorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    get:
      tags:
        - user
      summary: Get user data from user id
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Sucessfully patched ingame user id
          content:
            application/json:
              schema:
                type: object
                properties:
                  User:
                    type: object
                    properties:  
                      id:
                        type: integer
                      player_uuid:
                        type: string
                      username:
                        type: string
                      region:
                        type: string
                  token:
                    type: string
        '404':
          description: User not found or invalid 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/users/{user_id}/competitors/:
    get:
      summary: List of competitors of user
      tags:
        - competitor
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucessfully returned list of competitors
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Competitor'
    post:
      summary: Add new competitor of user
      tags:
        - competitor
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                player_uuid:
                  type: string
      responses:
        '200':
          description: No content
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Competitor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '401':
          description: Not authorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '409':
          description: Competitorship already exists 
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /api/users/{user_id}/competitors/puuids:
    get:
      summary: Get list of competitors puuids
      tags:
        - competitor
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sucessfully returned specific competitors puuids
          content:
            application/json:
              schema: 
                type: array
                items:
                    description: puuids 
                    type: string
  /api/users/{user_id}/competitors/{competitor_puuid}:
      get:
        summary: Get specific competitor
        tags:
          - competitor
        parameters:
          - name: token
            in: header
            required: true
            schema:
              type: string
          - name: user_id
            in: path
            required: true
            schema:
              type: integer
          - name: competitor_puuid
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Sucessfully returned specific competitor
            content:
              application/json:
                schema: 
                  type: object
                  properties: 
                    Competitor:
                      $ref: '#/components/schemas/Competitor'
          '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
      delete:
        summary: Delete specific competitor of user
        tags:
          - competitor
        parameters:
          - name: token
            in: header
            required: true
            schema:
              type: string
          - name: user_id
            in: path
            required: true
            schema:
              type: integer
          - name: competitor_puuid
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: No content
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
          '404':
            description: Competitor not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
          '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
  /api/users/{user_id}/achievements:
    get:
      summary: Get all favourite achievement of user
      tags:
        - achievement
      parameters:
          - name: user_id
            in: path
            required: true
            schema:
              type: integer
      responses:
       '200':
            description: No content
            content:
              application/json:
                schema:
                  type: array
                  items:
                    description: name of achivement
                    type: string 
    post:
      summary: Add specific achievement to user favourites
      tags:
        - achievement
      parameters:
          - name: token
            in: header
            required: true
            schema:
              type: string
          - name: user_id
            in: path
            required: true
            schema:
              type: integer
      responses:
       '200':
            description: No content
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
       '400':
            description: Achievement already set as favourite
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
       '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
  /api/users/{user_id}/achievements/{achievement_name}:
    delete:
      summary: Delete specific favourite achievement of user
      tags:
        - achievement
      parameters:
          - name: token
            in: header
            required: true
            schema:
              type: string
          - name: user_id
            in: path
            required: true
            schema:
              type: integer
          - name: achievement_name
            in: path
            required: true
            schema:
              type: string
      responses:
       '200':
            description: No content
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
       '404':
            description: Achievement not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
       '401':
            description: Not authorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        player_uuid:
          type: string
        username:
          type: string
        mail:
          type: string
        region:
          type: string
        token:
          type: string
    Competitor:
      type: object
      properties:
        id:
          type: integer
        player_uuid: 
          type: string
        username: 
          type: string
        player_stats:
          $ref: '#/components/schemas/Player'
    Rank:
      type: object
      properties:
        rank:
          type: string
        tier:
          type: number
        league_points:
          type: number
    ChampionID:
      type: number
      description: Same ID as in the Riot API
    Player:
      type: object
      description: Retrieve from Player-Endpoint without Winrate and "Most Played"-Object 
      properties:
        id:
          type: number
        icon_path:
          type: string
        name:
          type: string
        avatar:
          type: string
          description: path
        rank:
          $ref: '#/components/schemas/Rank'
    login_data:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          description: encoded